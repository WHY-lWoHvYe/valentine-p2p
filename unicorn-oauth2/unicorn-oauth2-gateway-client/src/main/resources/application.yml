server:
  port: 8080

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
#    org.springframework.boot.autoconfigure: DEBUG

spring:
  thymeleaf:
    cache: false
  # use virtual threads in Spring Boot 3.2 + Java 21
  threads:
    virtual:
      enabled: true
  security:
    oauth2:
      client:
        registration:
          # 下面这些client的配置，会自动config，在代码中根据client-name选用，这里其client-id必须是在auth-server做了register的
          messaging-client-oidc:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
            scope: openid, profile
            client-name: messaging-client-oidc
          messaging-client-authorization-code:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/authorized"
            # 这里是要申请的scope，只能该client在auth-server register时，明确的scope的子集
            scope: openid,profile,resource.read,resource.write,message.read,message.write
            client-name: messaging-client-authorization-code
          messaging-client-client-credentials:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: messaging-client-client-credentials
          login-client:
            provider: spring
            client-id: login-client
            client-secret: login-secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
            scope: openid,profile,email,resource.read
            client-name: gateway-login-client
        provider:
          spring:
            issuer-uri: http://localhost:9000

  cloud:
    gateway:
      server:
        webflux:
          httpclient:
            ssl:
              # trust all downstream certificates
              use-insecure-trust-manager: true
              handshake-timeout: 5000ms
          x-forwarded:
            prefix-enabled: false # need to disable & add manually。这个在下面各种filter之后，这个是个list
          routes:
            - id: resource-service
              uri: http://localhost:8090
              predicates:
                - Path=/res/res-mvc/**
              filters:
                - TokenRelay=
                # 下面这俩的顺序是有影响的，要注意
                # 剥去一段，/res/some-resource变为/some-resource
                - StripPrefix=1
                # 添加prefix，从/some-resource变为/api/some-resource
                #- PrefixPath=/api
                - AddRequestHeader=X-Forwarded-Prefix, /res/res-mvc
            - id: resource-service-flux
              uri: http://localhost:8091
              predicates:
                - Path=/res/res-flux/**
              filters:
                - TokenRelay=
                # 下面这俩的顺序是有影响的，要注意
                # 剥去一段，/res/some-resource变为/some-resource
                - StripPrefix=2
                # 添加prefix，从/some-resource变为/api/some-resource
                #- PrefixPath=/api
                - AddRequestHeader=X-Forwarded-Prefix, /res/res-flux
            - id: security-service
              uri: https://localhost:8081
              predicates:
                - Path=/security/**, /unicorn/security/**
              filters:
                - ContextPathRewritePath=/unicorn/security/(?<path>.*), /$\{path}
                - RewritePath=/security/(?<path>.*), /$\{path}
                - AddRequestHeader=X-Forwarded-Prefix, /security
            - id: openapi
              uri: http://localhost:${server.port}
              predicates:
                - Path=/v3/api-docs/**
              filters:
                - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs

  session:
    store-type: redis
    timeout: 900s
  redis:
    redisson:
      file: 'classpath:redisson.yaml'

#springdoc:
#  swagger-ui:
#    use-root-path: true
springdoc:
  swagger-ui:
    urls:
      - name: security-service
        display-name: unicorn-security
        url: /v3/api-docs/security
      - name: resource-service
        display-name: unicorn-resource
        url: /v3/api-docs/res/res-mvc
      - name: gateway
        display-name: remote-gateway
        url: /v3/api-docs
  cache:
    disabled: true

messages:
  base-uri: http://127.0.0.1:8091/api/messages
